//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class DashboardService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    get(  cancelToken?: CancelToken | undefined): Promise<DashboardViewModel> {
        let url_ = this.baseUrl + "/api/Dashboard";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<DashboardViewModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DashboardViewModel.fromJS(resultData200, _mappings);
            return Promise.resolve<DashboardViewModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardViewModel>(null as any);
    }
}

export class DashboardViewModel implements IDashboardViewModel {
    nodes!: Node[];
    trafficByPort!: TrafficCount[];
    trafficByNode!: TrafficCount[];

    constructor(data?: IDashboardViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(Node.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["trafficByPort"])) {
                this.trafficByPort = [] as any;
                for (let item of _data["trafficByPort"])
                    this.trafficByPort!.push(TrafficCount.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["trafficByNode"])) {
                this.trafficByNode = [] as any;
                for (let item of _data["trafficByNode"])
                    this.trafficByNode!.push(TrafficCount.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): DashboardViewModel | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<DashboardViewModel>(data, _mappings, DashboardViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.trafficByPort)) {
            data["trafficByPort"] = [];
            for (let item of this.trafficByPort)
                data["trafficByPort"].push(item.toJSON());
        }
        if (Array.isArray(this.trafficByNode)) {
            data["trafficByNode"] = [];
            for (let item of this.trafficByNode)
                data["trafficByNode"].push(item.toJSON());
        }
        return data;
    }

    clone(): DashboardViewModel {
        const json = this.toJSON();
        let result = new DashboardViewModel();
        result.init(json);
        return result;
    }
}

export interface IDashboardViewModel {
    nodes: Node[];
    trafficByPort: TrafficCount[];
    trafficByNode: TrafficCount[];
}

export class Node implements INode {
    id!: number;
    name!: string;
    shortName!: string;
    hardwareModel!: string;
    lastLatitude!: number | undefined;
    lastLongitude!: number | undefined;
    lastAltitude!: number | undefined;
    lastBatteryLevel!: number | undefined;
    lastAirUtilTx!: number | undefined;
    lastChannelUtilTx!: number | undefined;
    takCallsign!: string | undefined;
    takTeam!: string;
    takRole!: string;
    takUnitType!: string;
    snr!: number;
    rssi!: number;
    lastHeardFrom!: Date;

    constructor(data?: INode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.hardwareModel = _data["hardwareModel"];
            this.lastLatitude = _data["lastLatitude"];
            this.lastLongitude = _data["lastLongitude"];
            this.lastAltitude = _data["lastAltitude"];
            this.lastBatteryLevel = _data["lastBatteryLevel"];
            this.lastAirUtilTx = _data["lastAirUtilTx"];
            this.lastChannelUtilTx = _data["lastChannelUtilTx"];
            this.takCallsign = _data["takCallsign"];
            this.takTeam = _data["takTeam"];
            this.takRole = _data["takRole"];
            this.takUnitType = _data["takUnitType"];
            this.snr = _data["snr"];
            this.rssi = _data["rssi"];
            this.lastHeardFrom = _data["lastHeardFrom"] ? new Date(_data["lastHeardFrom"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any, _mappings?: any): Node | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<Node>(data, _mappings, Node);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["hardwareModel"] = this.hardwareModel;
        data["lastLatitude"] = this.lastLatitude;
        data["lastLongitude"] = this.lastLongitude;
        data["lastAltitude"] = this.lastAltitude;
        data["lastBatteryLevel"] = this.lastBatteryLevel;
        data["lastAirUtilTx"] = this.lastAirUtilTx;
        data["lastChannelUtilTx"] = this.lastChannelUtilTx;
        data["takCallsign"] = this.takCallsign;
        data["takTeam"] = this.takTeam;
        data["takRole"] = this.takRole;
        data["takUnitType"] = this.takUnitType;
        data["snr"] = this.snr;
        data["rssi"] = this.rssi;
        data["lastHeardFrom"] = this.lastHeardFrom ? this.lastHeardFrom.toISOString() : <any>undefined;
        return data;
    }

    clone(): Node {
        const json = this.toJSON();
        let result = new Node();
        result.init(json);
        return result;
    }
}

export interface INode {
    id: number;
    name: string;
    shortName: string;
    hardwareModel: string;
    lastLatitude: number | undefined;
    lastLongitude: number | undefined;
    lastAltitude: number | undefined;
    lastBatteryLevel: number | undefined;
    lastAirUtilTx: number | undefined;
    lastChannelUtilTx: number | undefined;
    takCallsign: string | undefined;
    takTeam: string;
    takRole: string;
    takUnitType: string;
    snr: number;
    rssi: number;
    lastHeardFrom: Date;
}

export class TrafficCount implements ITrafficCount {
    id!: number;
    name!: string;
    count!: number;

    constructor(data?: ITrafficCount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any, _mappings?: any): TrafficCount | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<TrafficCount>(data, _mappings, TrafficCount);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["count"] = this.count;
        return data;
    }

    clone(): TrafficCount {
        const json = this.toJSON();
        let result = new TrafficCount();
        result.init(json);
        return result;
    }
}

export interface ITrafficCount {
    id: number;
    name: string;
    count: number;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}