// <auto-generated />
using System;
using Meshtastic.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Meshtastic.Persistance.Migrations
{
    [DbContext(typeof(MeshtasticDbContext))]
    partial class MeshtasticDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Meshtastic.Persistance.Model.Node", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HardwareModel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float?>("LastAirUtilTx")
                        .HasColumnType("REAL");

                    b.Property<int?>("LastAltitude")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastBatteryLevel")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("LastChannelUtilTx")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastHeardFrom")
                        .HasColumnType("TEXT");

                    b.Property<double?>("LastLatitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("LastLongitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("RSSI")
                        .HasColumnType("REAL");

                    b.Property<float>("SNR")
                        .HasColumnType("REAL");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TAKCallsign")
                        .HasColumnType("TEXT");

                    b.Property<string>("TAKRole")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TAKTeam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TAKUnitType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Meshtastic.Persistance.Model.PositionPacket", b =>
                {
                    b.Property<uint>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PositionId");

                    b.HasIndex("NodeId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Meshtastic.Persistance.Model.TelemetryPacket", b =>
                {
                    b.Property<uint>("TelemetryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TelemetryId");

                    b.HasIndex("NodeId");

                    b.ToTable("Telemetries");
                });

            modelBuilder.Entity("Meshtastic.Persistance.Model.TextPacket", b =>
                {
                    b.Property<uint>("TextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TextId");

                    b.HasIndex("NodeId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("Meshtastic.Persistance.Model.WaypointPacket", b =>
                {
                    b.Property<uint>("WaypointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WaypointId");

                    b.HasIndex("NodeId");

                    b.ToTable("Waypoints");
                });

            modelBuilder.Entity("NodeInfoPacket", b =>
                {
                    b.Property<uint>("NodeInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NodeInfoId");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeInfos");
                });

            modelBuilder.Entity("Meshtastic.Persistance.Model.PositionPacket", b =>
                {
                    b.HasOne("Meshtastic.Persistance.Model.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Meshtastic.Persistance.Model.TelemetryPacket", b =>
                {
                    b.HasOne("Meshtastic.Persistance.Model.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Meshtastic.Persistance.Model.TextPacket", b =>
                {
                    b.HasOne("Meshtastic.Persistance.Model.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Meshtastic.Persistance.Model.WaypointPacket", b =>
                {
                    b.HasOne("Meshtastic.Persistance.Model.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("NodeInfoPacket", b =>
                {
                    b.HasOne("Meshtastic.Persistance.Model.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });
#pragma warning restore 612, 618
        }
    }
}
