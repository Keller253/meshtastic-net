// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: device_metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Meshtastic.Protobufs {

  /// <summary>Holder for reflection information generated from device_metadata.proto</summary>
  public static partial class DeviceMetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for device_metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeviceMetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVkZXZpY2VfbWV0YWRhdGEucHJvdG8imQEKDkRldmljZU1ldGFkYXRhEhgK",
            "EGZpcm13YXJlX3ZlcnNpb24YASABKAkSHAoUZGV2aWNlX3N0YXRlX3ZlcnNp",
            "b24YAiABKA0SEwoLY2FuU2h1dGRvd24YAyABKAgSDwoHaGFzV2lmaRgEIAEo",
            "CBIUCgxoYXNCbHVldG9vdGgYBSABKAgSEwoLaGFzRXRoZXJuZXQYBiABKAhC",
            "aAoTY29tLmdlZWtzdmlsbGUubWVzaEIURGV2aWNlTWV0YWRhdGFQcm90b3NI",
            "A1oiZ2l0aHViLmNvbS9tZXNodGFzdGljL2dvL2dlbmVyYXRlZKoCFE1lc2h0",
            "YXN0aWMuUHJvdG9idWZzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.DeviceMetadata), global::Meshtastic.Protobufs.DeviceMetadata.Parser, new[]{ "FirmwareVersion", "DeviceStateVersion", "CanShutdown", "HasWifi", "HasBluetooth", "HasEthernet" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// Device metadata response 
  /// </summary>
  public sealed partial class DeviceMetadata : pb::IMessage<DeviceMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeviceMetadata> _parser = new pb::MessageParser<DeviceMetadata>(() => new DeviceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeviceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.DeviceMetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetadata(DeviceMetadata other) : this() {
      firmwareVersion_ = other.firmwareVersion_;
      deviceStateVersion_ = other.deviceStateVersion_;
      canShutdown_ = other.canShutdown_;
      hasWifi_ = other.hasWifi_;
      hasBluetooth_ = other.hasBluetooth_;
      hasEthernet_ = other.hasEthernet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceMetadata Clone() {
      return new DeviceMetadata(this);
    }

    /// <summary>Field number for the "firmware_version" field.</summary>
    public const int FirmwareVersionFieldNumber = 1;
    private string firmwareVersion_ = "";
    /// <summary>
    ///
    /// Device firmware version string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FirmwareVersion {
      get { return firmwareVersion_; }
      set {
        firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_state_version" field.</summary>
    public const int DeviceStateVersionFieldNumber = 2;
    private uint deviceStateVersion_;
    /// <summary>
    ///
    /// Device state version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DeviceStateVersion {
      get { return deviceStateVersion_; }
      set {
        deviceStateVersion_ = value;
      }
    }

    /// <summary>Field number for the "canShutdown" field.</summary>
    public const int CanShutdownFieldNumber = 3;
    private bool canShutdown_;
    /// <summary>
    ///
    /// Indicates whether the device can shutdown CPU natively or via power management chip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanShutdown {
      get { return canShutdown_; }
      set {
        canShutdown_ = value;
      }
    }

    /// <summary>Field number for the "hasWifi" field.</summary>
    public const int HasWifiFieldNumber = 4;
    private bool hasWifi_;
    /// <summary>
    ///
    /// Indicates that the device has native wifi capability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWifi {
      get { return hasWifi_; }
      set {
        hasWifi_ = value;
      }
    }

    /// <summary>Field number for the "hasBluetooth" field.</summary>
    public const int HasBluetoothFieldNumber = 5;
    private bool hasBluetooth_;
    /// <summary>
    ///
    /// Indicates that the device has native bluetooth capability
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBluetooth {
      get { return hasBluetooth_; }
      set {
        hasBluetooth_ = value;
      }
    }

    /// <summary>Field number for the "hasEthernet" field.</summary>
    public const int HasEthernetFieldNumber = 6;
    private bool hasEthernet_;
    /// <summary>
    ///
    /// Indicates that the device has an ethernet peripheral
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEthernet {
      get { return hasEthernet_; }
      set {
        hasEthernet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeviceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeviceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirmwareVersion != other.FirmwareVersion) return false;
      if (DeviceStateVersion != other.DeviceStateVersion) return false;
      if (CanShutdown != other.CanShutdown) return false;
      if (HasWifi != other.HasWifi) return false;
      if (HasBluetooth != other.HasBluetooth) return false;
      if (HasEthernet != other.HasEthernet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FirmwareVersion.Length != 0) hash ^= FirmwareVersion.GetHashCode();
      if (DeviceStateVersion != 0) hash ^= DeviceStateVersion.GetHashCode();
      if (CanShutdown != false) hash ^= CanShutdown.GetHashCode();
      if (HasWifi != false) hash ^= HasWifi.GetHashCode();
      if (HasBluetooth != false) hash ^= HasBluetooth.GetHashCode();
      if (HasEthernet != false) hash ^= HasEthernet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirmwareVersion);
      }
      if (DeviceStateVersion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DeviceStateVersion);
      }
      if (CanShutdown != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanShutdown);
      }
      if (HasWifi != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasWifi);
      }
      if (HasBluetooth != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasBluetooth);
      }
      if (HasEthernet != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasEthernet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirmwareVersion);
      }
      if (DeviceStateVersion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DeviceStateVersion);
      }
      if (CanShutdown != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanShutdown);
      }
      if (HasWifi != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasWifi);
      }
      if (HasBluetooth != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasBluetooth);
      }
      if (HasEthernet != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasEthernet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FirmwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
      }
      if (DeviceStateVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceStateVersion);
      }
      if (CanShutdown != false) {
        size += 1 + 1;
      }
      if (HasWifi != false) {
        size += 1 + 1;
      }
      if (HasBluetooth != false) {
        size += 1 + 1;
      }
      if (HasEthernet != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeviceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.FirmwareVersion.Length != 0) {
        FirmwareVersion = other.FirmwareVersion;
      }
      if (other.DeviceStateVersion != 0) {
        DeviceStateVersion = other.DeviceStateVersion;
      }
      if (other.CanShutdown != false) {
        CanShutdown = other.CanShutdown;
      }
      if (other.HasWifi != false) {
        HasWifi = other.HasWifi;
      }
      if (other.HasBluetooth != false) {
        HasBluetooth = other.HasBluetooth;
      }
      if (other.HasEthernet != false) {
        HasEthernet = other.HasEthernet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 16: {
            DeviceStateVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            CanShutdown = input.ReadBool();
            break;
          }
          case 32: {
            HasWifi = input.ReadBool();
            break;
          }
          case 40: {
            HasBluetooth = input.ReadBool();
            break;
          }
          case 48: {
            HasEthernet = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 16: {
            DeviceStateVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            CanShutdown = input.ReadBool();
            break;
          }
          case 32: {
            HasWifi = input.ReadBool();
            break;
          }
          case 40: {
            HasBluetooth = input.ReadBool();
            break;
          }
          case 48: {
            HasEthernet = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
